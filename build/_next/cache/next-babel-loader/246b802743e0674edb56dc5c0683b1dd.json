{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-fetch';\nvar SERVICE_URBAN_MAP_API_BASE_URL = process.env.SERVICE_URBAN_MAP_API_BASE_URL;\nvar credentials = 'include';\n\nvar fetchWrapper = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, config) {\n    var request, res, error;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            request = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var url;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        url = \"\".concat(SERVICE_URBAN_MAP_API_BASE_URL).concat(path);\n                        _context.next = 4;\n                        return fetch(url, config);\n\n                      case 4:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 7:\n                        _context.prev = 7;\n                        _context.t0 = _context[\"catch\"](0);\n                        throw new Error('Não foi possível se conectar ao servidor');\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 7]]);\n              }));\n\n              return function request() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 3;\n            return request();\n\n          case 3:\n            res = _context2.sent;\n\n            if (!res.ok) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", res);\n\n          case 6:\n            _context2.next = 8;\n            return res.json();\n\n          case 8:\n            error = _context2.sent;\n            throw error;\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchWrapper(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar requestWithBody = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(method, path, body, headers) {\n    var config;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            config = {\n              body: _JSON$stringify(body),\n              credentials: credentials,\n              headers: _objectSpread({\n                'Content-Type': 'application/json'\n              }, headers),\n              method: method\n            };\n            return _context3.abrupt(\"return\", fetchWrapper(path, config));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function requestWithBody(_x3, _x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport var get = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path, headers) {\n    var config;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            config = {\n              credentials: credentials,\n              method: 'GET',\n              headers: headers\n            };\n            return _context4.abrupt(\"return\", fetchWrapper(path, config));\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function get(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var post = function post(path, body, headers) {\n  return requestWithBody('POST', path, body, headers);\n};\nexport var put = function put(path, body, headers) {\n  return requestWithBody('PUT', path, body, headers);\n};","map":{"version":3,"sources":["/home/lucas/dev/uerj/urban-map-site/src/utils/request.js"],"names":["fetch","SERVICE_URBAN_MAP_API_BASE_URL","process","env","credentials","fetchWrapper","path","config","request","url","Error","res","ok","json","error","requestWithBody","method","body","headers","get","post","put"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;IAEQC,8B,GAAmCC,OAAO,CAACC,G,CAA3CF,8B;AAER,IAAMG,WAAW,GAAG,SAApB;;AAEA,IAAMC,YAAY;AAAA,sEAAG,kBAAOC,IAAP,EAAaC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,OADa;AAAA,mFACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAENC,wBAAAA,GAFM,aAEGR,8BAFH,SAEoCK,IAFpC;AAAA;AAAA,+BAICN,KAAK,CAACS,GAAD,EAAMF,MAAN,CAJN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8BAMN,IAAIG,KAAJ,CAAU,0CAAV,CANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADG;;AAAA,8BACbF,OADa;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWDA,OAAO,EAXN;;AAAA;AAWbG,YAAAA,GAXa;;AAAA,iBAafA,GAAG,CAACC,EAbW;AAAA;AAAA;AAAA;;AAAA,8CAcVD,GAdU;;AAAA;AAAA;AAAA,mBAiBCA,GAAG,CAACE,IAAJ,EAjBD;;AAAA;AAiBbC,YAAAA,KAjBa;AAAA,kBAmBbA,KAnBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZT,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAsBA,IAAMU,eAAe;AAAA,uEAAG,kBAAOC,MAAP,EAAeV,IAAf,EAAqBW,IAArB,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBX,YAAAA,MADgB,GACP;AACbU,cAAAA,IAAI,EAAE,gBAAeA,IAAf,CADO;AAEbb,cAAAA,WAAW,EAAXA,WAFa;AAGbc,cAAAA,OAAO;AACL,gCAAgB;AADX,iBAEFA,OAFE,CAHM;AAObF,cAAAA,MAAM,EAANA;AAPa,aADO;AAAA,8CAWfX,YAAY,CAACC,IAAD,EAAOC,MAAP,CAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfQ,eAAe;AAAA;AAAA;AAAA,GAArB;;AAcA,OAAO,IAAMI,GAAG;AAAA,uEAAG,kBAAOb,IAAP,EAAaY,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACXX,YAAAA,MADW,GACF;AACbH,cAAAA,WAAW,EAAXA,WADa;AAEbY,cAAAA,MAAM,EAAE,KAFK;AAGbE,cAAAA,OAAO,EAAPA;AAHa,aADE;AAAA,8CAOVb,YAAY,CAACC,IAAD,EAAOC,MAAP,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAHY,GAAG;AAAA;AAAA;AAAA,GAAT;AAUP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACd,IAAD,EAAOW,IAAP,EAAaC,OAAb;AAAA,SAAyBH,eAAe,CAAC,MAAD,EAAST,IAAT,EAAeW,IAAf,EAAqBC,OAArB,CAAxC;AAAA,CAAb;AAEP,OAAO,IAAMG,GAAG,GAAG,SAANA,GAAM,CAACf,IAAD,EAAOW,IAAP,EAAaC,OAAb;AAAA,SAAyBH,eAAe,CAAC,KAAD,EAAQT,IAAR,EAAcW,IAAd,EAAoBC,OAApB,CAAxC;AAAA,CAAZ","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nconst { SERVICE_URBAN_MAP_API_BASE_URL } = process.env;\n\nconst credentials = 'include';\n\nconst fetchWrapper = async (path, config) => {\n  const request = async () => {\n    try {\n      const url = `${SERVICE_URBAN_MAP_API_BASE_URL}${path}`;\n\n      return await fetch(url, config);\n    } catch (error) {\n      throw new Error('Não foi possível se conectar ao servidor');\n    }\n  };\n\n  const res = await request();\n\n  if (res.ok) {\n    return res;\n  }\n\n  const error = await res.json();\n\n  throw error;\n};\n\nconst requestWithBody = async (method, path, body, headers) => {\n  const config = {\n    body: JSON.stringify(body),\n    credentials,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    method,\n  };\n\n  return fetchWrapper(path, config);\n};\n\nexport const get = async (path, headers) => {\n  const config = {\n    credentials,\n    method: 'GET',\n    headers,\n  };\n\n  return fetchWrapper(path, config);\n};\n\nexport const post = (path, body, headers) => requestWithBody('POST', path, body, headers);\n\nexport const put = (path, body, headers) => requestWithBody('PUT', path, body, headers);\n"]},"metadata":{},"sourceType":"module"}