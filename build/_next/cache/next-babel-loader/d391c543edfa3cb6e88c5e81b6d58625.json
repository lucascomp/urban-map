{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-fetch';\nconst {\n  SERVICE_URBAN_MAP_API_BASE_URL\n} = process.env;\nconst credentials = 'include';\n\nconst fetchWrapper = async (path, config) => {\n  const request = async () => {\n    try {\n      const url = `${SERVICE_URBAN_MAP_API_BASE_URL}${path}`;\n      return await fetch(url, config);\n    } catch (error) {\n      throw new Error('Não foi possível se conectar ao servidor');\n    }\n  };\n\n  const res = await request();\n\n  if (res.ok) {\n    return res;\n  }\n\n  const error = await res.json();\n  throw error;\n};\n\nconst requestWithBody = async (method, path, body, headers) => {\n  const config = {\n    body: _JSON$stringify(body),\n    credentials,\n    headers: _objectSpread({\n      'Content-Type': 'application/json'\n    }, headers),\n    method\n  };\n  return fetchWrapper(path, config);\n};\n\nexport const get = async (path, headers) => {\n  const config = {\n    credentials,\n    method: 'GET',\n    headers\n  };\n  return fetchWrapper(path, config);\n};\nexport const post = (path, body, headers) => requestWithBody('POST', path, body, headers);\nexport const put = (path, body, headers) => requestWithBody('PUT', path, body, headers);","map":{"version":3,"sources":["/home/lucas/dev/uerj/urban-map-site/src/utils/request.js"],"names":["fetch","SERVICE_URBAN_MAP_API_BASE_URL","process","env","credentials","fetchWrapper","path","config","request","url","error","Error","res","ok","json","requestWithBody","method","body","headers","get","post","put"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAqCC,OAAO,CAACC,GAAnD;AAEA,MAAMC,WAAW,GAAG,SAApB;;AAEA,MAAMC,YAAY,GAAG,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AAC3C,QAAMC,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAMC,GAAG,GAAI,GAAER,8BAA+B,GAAEK,IAAK,EAArD;AAEA,aAAO,MAAMN,KAAK,CAACS,GAAD,EAAMF,MAAN,CAAlB;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF,GARD;;AAUA,QAAMC,GAAG,GAAG,MAAMJ,OAAO,EAAzB;;AAEA,MAAII,GAAG,CAACC,EAAR,EAAY;AACV,WAAOD,GAAP;AACD;;AAED,QAAMF,KAAK,GAAG,MAAME,GAAG,CAACE,IAAJ,EAApB;AAEA,QAAMJ,KAAN;AACD,CApBD;;AAsBA,MAAMK,eAAe,GAAG,OAAOC,MAAP,EAAeV,IAAf,EAAqBW,IAArB,EAA2BC,OAA3B,KAAuC;AAC7D,QAAMX,MAAM,GAAG;AACbU,IAAAA,IAAI,EAAE,gBAAeA,IAAf,CADO;AAEbb,IAAAA,WAFa;AAGbc,IAAAA,OAAO;AACL,sBAAgB;AADX,OAEFA,OAFE,CAHM;AAObF,IAAAA;AAPa,GAAf;AAUA,SAAOX,YAAY,CAACC,IAAD,EAAOC,MAAP,CAAnB;AACD,CAZD;;AAcA,OAAO,MAAMY,GAAG,GAAG,OAAOb,IAAP,EAAaY,OAAb,KAAyB;AAC1C,QAAMX,MAAM,GAAG;AACbH,IAAAA,WADa;AAEbY,IAAAA,MAAM,EAAE,KAFK;AAGbE,IAAAA;AAHa,GAAf;AAMA,SAAOb,YAAY,CAACC,IAAD,EAAOC,MAAP,CAAnB;AACD,CARM;AAUP,OAAO,MAAMa,IAAI,GAAG,CAACd,IAAD,EAAOW,IAAP,EAAaC,OAAb,KAAyBH,eAAe,CAAC,MAAD,EAAST,IAAT,EAAeW,IAAf,EAAqBC,OAArB,CAArD;AAEP,OAAO,MAAMG,GAAG,GAAG,CAACf,IAAD,EAAOW,IAAP,EAAaC,OAAb,KAAyBH,eAAe,CAAC,KAAD,EAAQT,IAAR,EAAcW,IAAd,EAAoBC,OAApB,CAApD","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nconst { SERVICE_URBAN_MAP_API_BASE_URL } = process.env;\n\nconst credentials = 'include';\n\nconst fetchWrapper = async (path, config) => {\n  const request = async () => {\n    try {\n      const url = `${SERVICE_URBAN_MAP_API_BASE_URL}${path}`;\n\n      return await fetch(url, config);\n    } catch (error) {\n      throw new Error('Não foi possível se conectar ao servidor');\n    }\n  };\n\n  const res = await request();\n\n  if (res.ok) {\n    return res;\n  }\n\n  const error = await res.json();\n\n  throw error;\n};\n\nconst requestWithBody = async (method, path, body, headers) => {\n  const config = {\n    body: JSON.stringify(body),\n    credentials,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    method,\n  };\n\n  return fetchWrapper(path, config);\n};\n\nexport const get = async (path, headers) => {\n  const config = {\n    credentials,\n    method: 'GET',\n    headers,\n  };\n\n  return fetchWrapper(path, config);\n};\n\nexport const post = (path, body, headers) => requestWithBody('POST', path, body, headers);\n\nexport const put = (path, body, headers) => requestWithBody('PUT', path, body, headers);\n"]},"metadata":{},"sourceType":"module"}