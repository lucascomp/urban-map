{"ast":null,"code":"import { forceClearSession } from '../utils/auth';\nimport { get, post, put } from '../utils/request';\nimport redirect from '../utils/router';\nconst {\n  SERVICE_URBAN_MAP_API_BASE_URL\n} = process.env;\nexport const forgotPassword = ({\n  email\n}) => {\n  const path = '/forgot-password';\n  return post(path, {\n    email\n  });\n};\nexport const getUser = async ({\n  cookie\n} = {}) => {\n  const response = await get('/user', {\n    cookie\n  });\n  return response.json();\n};\nexport const login = ({\n  email,\n  password\n}) => {\n  const path = '/login';\n  return post(path, {\n    email,\n    password\n  });\n};\n\nconst loginWithProvider = ({\n  provider\n}) => {\n  redirect(`${SERVICE_URBAN_MAP_API_BASE_URL}/login/${provider}`);\n};\n\nexport const loginWithFacebook = () => {\n  const provider = 'facebook';\n  loginWithProvider({\n    provider\n  });\n};\nexport const loginWithGoogle = () => {\n  const provider = 'google';\n  loginWithProvider({\n    provider\n  });\n};\nexport const logout = async ({\n  cookie\n} = {}) => {\n  const path = '/logout';\n\n  try {\n    const res = await get(path, {\n      cookie\n    });\n\n    if (!res.ok) {\n      const message = await res.text();\n      throw new Error(message);\n    }\n  } catch (error) {\n    forceClearSession();\n  }\n};\nexport const registerAdmin = ({\n  email,\n  firstName,\n  lastName,\n  password\n}) => post('/register-admin', {\n  email,\n  firstName,\n  lastName,\n  password\n});\nexport const resetPassword = ({\n  token,\n  password\n}) => {\n  const path = '/reset-password';\n  return post(path, {\n    token,\n    password\n  });\n};\nexport const signup = ({\n  firstName,\n  lastName,\n  email,\n  password\n}) => {\n  const path = '/signup';\n  return put(path, {\n    firstName,\n    lastName,\n    email,\n    password\n  });\n};","map":{"version":3,"sources":["/home/lucas/dev/uerj/urban-map-site/src/services/users.js"],"names":["forceClearSession","get","post","put","redirect","SERVICE_URBAN_MAP_API_BASE_URL","process","env","forgotPassword","email","path","getUser","cookie","response","json","login","password","loginWithProvider","provider","loginWithFacebook","loginWithGoogle","logout","res","ok","message","text","Error","error","registerAdmin","firstName","lastName","resetPassword","token","signup"],"mappings":"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","sourcesContent":["import { forceClearSession } from '../utils/auth';\nimport { get, post, put } from '../utils/request';\nimport redirect from '../utils/router';\n\nconst { SERVICE_URBAN_MAP_API_BASE_URL } = process.env;\n\nexport const forgotPassword = ({ email }) => {\n  const path = '/forgot-password';\n\n  return post(path, { email });\n};\n\nexport const getUser = async ({ cookie } = {}) => {\n  const response = await get('/user', { cookie });\n\n  return response.json();\n};\n\nexport const login = ({ email, password }) => {\n  const path = '/login';\n\n  return post(path, { email, password });\n};\n\nconst loginWithProvider = ({ provider }) => {\n  redirect(`${SERVICE_URBAN_MAP_API_BASE_URL}/login/${provider}`);\n};\n\nexport const loginWithFacebook = () => {\n  const provider = 'facebook';\n\n  loginWithProvider({ provider });\n};\n\nexport const loginWithGoogle = () => {\n  const provider = 'google';\n\n  loginWithProvider({ provider });\n};\n\nexport const logout = async ({ cookie } = {}) => {\n  const path = '/logout';\n\n  try {\n    const res = await get(path, { cookie });\n\n    if (!res.ok) {\n      const message = await res.text();\n      throw new Error(message);\n    }\n  } catch (error) {\n    forceClearSession();\n  }\n};\n\nexport const registerAdmin = ({\n  email,\n  firstName,\n  lastName,\n  password,\n}) => post('/register-admin', {\n  email,\n  firstName,\n  lastName,\n  password,\n});\n\nexport const resetPassword = ({ token, password }) => {\n  const path = '/reset-password';\n\n  return post(path, {\n    token,\n    password,\n  });\n};\n\nexport const signup = ({\n  firstName,\n  lastName,\n  email,\n  password,\n}) => {\n  const path = '/signup';\n\n  return put(path, {\n    firstName,\n    lastName,\n    email,\n    password,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}